{"ast":null,"code":"var _jsxFileName = \"/home/anshuman/Desktop/CodeShare/src/Pages/EditorPage.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\n\nconst EditorPage = () => {\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n\n      function handleErrors(err) {\n        console.log('socket error', err);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      }); // Listening for joined event\n\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients);\n        console.log('Debug', clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      }); // Listening for disconnected\n\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator('/');\n  }\n\n  if (!location.state) {\n    return /*#__PURE__*/React.createElement(Navigate, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainWrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"aside\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"asideInner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"logoImage\",\n    src: \"/img/coding.png\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: 'bold',\n      marginLeft: '20px',\n      fontSize: '18px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, \"codeShare\")), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      margin: '10px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, \"Connected\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clientsList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, clients.map(client => /*#__PURE__*/React.createElement(Client, {\n    key: client.socketId,\n    username: client.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn copyBtn\",\n    onClick: copyRoomId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Copy ROOM ID\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn leaveBtn\",\n    onClick: leaveRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Leave\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editorWrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    socketRef: socketRef,\n    roomId: roomId,\n    onCodeChange: code => {\n      codeRef.current = code;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default EditorPage;","map":{"version":3,"sources":["/home/anshuman/Desktop/CodeShare/src/Pages/EditorPage.js"],"names":["React","useState","useRef","useEffect","toast","ACTIONS","Client","Editor","initSocket","useLocation","useNavigate","Navigate","useParams","EditorPage","socketRef","codeRef","location","roomId","reactNavigator","clients","setClients","init","current","on","err","handleErrors","console","log","error","emit","JOIN","username","state","JOINED","socketId","success","SYNC_CODE","code","DISCONNECTED","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","fontWeight","marginLeft","fontSize","margin","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport ACTIONS from '../Actions';\r\nimport Client from '../components/Client';\r\nimport Editor from '../components/Editor';\r\nimport { initSocket } from '../socket';\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    Navigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\n\r\nconst EditorPage = () => {\r\n    const socketRef = useRef(null);\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const { roomId } = useParams();\r\n    const reactNavigator = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            socketRef.current = await initSocket();\r\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n            function handleErrors(err) {\r\n                console.log('socket error', err);\r\n                toast.error('Socket connection failed, try again later.');\r\n                reactNavigator('/');\r\n            }\r\n\r\n            socketRef.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                username: location.state?.username,\r\n            });\r\n\r\n            // Listening for joined event\r\n            socketRef.current.on(\r\n                ACTIONS.JOINED,\r\n                ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room.`);\r\n                        console.log(`${username} joined`);\r\n                    }\r\n                    setClients(clients);\r\n                    console.log('Debug',clients);\r\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                        code: codeRef.current,\r\n                        socketId,\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Listening for disconnected\r\n            socketRef.current.on(\r\n                ACTIONS.DISCONNECTED,\r\n                ({ socketId, username }) => {\r\n                    toast.success(`${username} left the room.`);\r\n                    setClients((prev) => {\r\n                        return prev.filter(\r\n                            (client) => client.socketId !== socketId\r\n                        );\r\n                    });\r\n                }\r\n            );\r\n        };\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(ACTIONS.JOINED);\r\n            socketRef.current.off(ACTIONS.DISCONNECTED);\r\n        };\r\n    }, []);\r\n\r\n    async function copyRoomId() {\r\n        try {\r\n            await navigator.clipboard.writeText(roomId);\r\n            toast.success('Room ID has been copied to your clipboard');\r\n        } catch (err) {\r\n            toast.error('Could not copy the Room ID');\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    function leaveRoom() {\r\n        reactNavigator('/');\r\n    }\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <div className=\"aside\">\r\n                <div className=\"asideInner\">\r\n                    <div className=\"logo\">\r\n                        <img\r\n                            className=\"logoImage\"\r\n                            src=\"/img/coding.png\"\r\n                            alt=\"logo\"\r\n                        />\r\n                            <span style={{fontWeight:'bold',marginLeft:'20px',fontSize:'18px'}}>codeShare</span>\r\n                      \r\n                        \r\n                    </div>\r\n                    <h3 style={{margin:'10px 0px'}}>Connected</h3>\r\n                    <div className=\"clientsList\">\r\n                        {clients.map((client) => (\r\n                            <Client\r\n                                key={client.socketId}\r\n                                username={client.username}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\r\n                    Copy ROOM ID\r\n                </button>\r\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\r\n                    Leave\r\n                </button>\r\n            </div>\r\n            <div className=\"editorWrap\">\r\n                <Editor\r\n                    socketRef={socketRef}\r\n                    roomId={roomId}\r\n                    onCodeChange={(code) => {\r\n                        codeRef.current = code;\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;"]},"metadata":{},"sourceType":"module"}