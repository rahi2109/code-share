{"ast":null,"code":"var _jsxFileName = \"/home/anshuman/Desktop/CodeShare/src/components/Editor.js\";\nimport React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = _ref => {\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = useRef(null);\n  useEffect(() => {\n    async function init() {\n      editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'), {\n        mode: {\n          name: 'javascript',\n          json: true\n        },\n        theme: 'dracula',\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true\n      });\n      editorRef.current.on('change', (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== 'setValue') {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n\n    init();\n  }, []);\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(ACTIONS.CODE_CHANGE, _ref2 => {\n        let {\n          code\n        } = _ref2;\n\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n\n    return () => {\n      socketRef.current.off(ACTIONS.CODE_CHANGE);\n    };\n  }, [socketRef.current]);\n  return /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"realtimeEditor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default Editor;","map":{"version":3,"sources":["/home/anshuman/Desktop/CodeShare/src/components/Editor.js"],"names":["React","useEffect","useRef","Codemirror","ACTIONS","Editor","socketRef","roomId","onCodeChange","editorRef","init","current","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","on","instance","changes","origin","code","getValue","emit","CODE_CHANGE","setValue","off"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAO,uCAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,MAAM,GAAG,QAAyC;AAAA,MAAxC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,GAAwC;AACpD,QAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,IAAf,GAAsB;AAClBD,MAAAA,SAAS,CAACE,OAAV,GAAoBR,UAAU,CAACS,YAAX,CAChBC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CADgB,EAEhB;AACIC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,IAAI,EAAE;AAA5B,SADV;AAEIC,QAAAA,KAAK,EAAE,SAFX;AAGIC,QAAAA,aAAa,EAAE,IAHnB;AAIIC,QAAAA,iBAAiB,EAAE,IAJvB;AAKIC,QAAAA,WAAW,EAAE;AALjB,OAFgB,CAApB;AAWAZ,MAAAA,SAAS,CAACE,OAAV,CAAkBW,EAAlB,CAAqB,QAArB,EAA+B,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAClD,cAAM;AAAEC,UAAAA;AAAF,YAAaD,OAAnB;AACA,cAAME,IAAI,GAAGH,QAAQ,CAACI,QAAT,EAAb;AACAnB,QAAAA,YAAY,CAACkB,IAAD,CAAZ;;AACA,YAAID,MAAM,KAAK,UAAf,EAA2B;AACvBnB,UAAAA,SAAS,CAACK,OAAV,CAAkBiB,IAAlB,CAAuBxB,OAAO,CAACyB,WAA/B,EAA4C;AACxCtB,YAAAA,MADwC;AAExCmB,YAAAA;AAFwC,WAA5C;AAIH;AACJ,OAVD;AAWH;;AACDhB,IAAAA,IAAI;AACP,GA1BQ,EA0BN,EA1BM,CAAT;AA4BAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,SAAS,CAACK,OAAd,EAAuB;AACnBL,MAAAA,SAAS,CAACK,OAAV,CAAkBW,EAAlB,CAAqBlB,OAAO,CAACyB,WAA7B,EAA0C,SAAc;AAAA,YAAb;AAAEH,UAAAA;AAAF,SAAa;;AACpD,YAAIA,IAAI,KAAK,IAAb,EAAmB;AACfjB,UAAAA,SAAS,CAACE,OAAV,CAAkBmB,QAAlB,CAA2BJ,IAA3B;AACH;AACJ,OAJD;AAKH;;AAED,WAAO,MAAM;AACTpB,MAAAA,SAAS,CAACK,OAAV,CAAkBoB,GAAlB,CAAsB3B,OAAO,CAACyB,WAA9B;AACH,KAFD;AAGH,GAZQ,EAYN,CAACvB,SAAS,CAACK,OAAX,CAZM,CAAT;AAcA,sBAAO;AAAU,IAAA,EAAE,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CA7CD;;AA+CA,eAAeN,MAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\nimport ACTIONS from '../Actions';\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n    const editorRef = useRef(null);\r\n    useEffect(() => {\r\n        async function init() {\r\n            editorRef.current = Codemirror.fromTextArea(\r\n                document.getElementById('realtimeEditor'),\r\n                {\r\n                    mode: { name: 'javascript', json: true },\r\n                    theme: 'dracula',\r\n                    autoCloseTags: true,\r\n                    autoCloseBrackets: true,\r\n                    lineNumbers: true,\r\n                }\r\n            );\r\n\r\n            editorRef.current.on('change', (instance, changes) => {\r\n                const { origin } = changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code);\r\n                if (origin !== 'setValue') {\r\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n                        roomId,\r\n                        code,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socketRef.current) {\r\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n                if (code !== null) {\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n        };\r\n    }, [socketRef.current]);\r\n\r\n    return <textarea id=\"realtimeEditor\"></textarea>;\r\n};\r\n\r\nexport default Editor;"]},"metadata":{},"sourceType":"module"}