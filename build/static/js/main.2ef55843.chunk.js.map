{"version":3,"sources":["Pages/HomePage.js","components/Client.js","components/Editor.js","socket.js","Pages/EditorPage.js","App.js","serviceWorker.js","index.js","Actions.js"],"names":["HomePage","navigate","useNavigate","useState","roomId","setRoomId","username","setUsername","joinRoom","state","toast","error","handleInputEnter","e","code","className","style","display","justifyContent","src","alt","margin","fontWeight","fontSize","type","placeholder","onChange","target","value","onKeyUp","onClick","preventDefault","id","uuidV4","success","href","Client","name","size","round","Editor","socketRef","onCodeChange","editorRef","useRef","useEffect","a","current","Codemirror","fromTextArea","document","getElementById","mode","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","on","instance","changes","origin","getValue","emit","ACTIONS","CODE_CHANGE","init","setValue","off","initSocket","options","reconnectionAttempt","timeout","transports","io","process","REACT_APP_BACKEND_URL","EditorPage","codeRef","location","useLocation","useParams","reactNavigator","clients","setClients","navigator","clipboard","writeText","console","handleErrors","err","log","JOIN","JOINED","socketId","SYNC_CODE","DISCONNECTED","prev","filter","client","disconnect","marginLeft","map","key","to","App","position","toastOptions","primary","path","element","Boolean","window","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","message","module","exports","LEAVE"],"mappings":"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","file":"static/js/main.2ef55843.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { v4 as uuidV4 } from 'uuid';\r\nimport toast from 'react-hot-toast';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomePage = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [roomId, setRoomId] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const createNewRoom = (e) => {\r\n        e.preventDefault();\r\n        const id = uuidV4();\r\n        setRoomId(id);\r\n        toast.success('Created a new room');\r\n    };\r\n\r\n    const joinRoom = () => {\r\n        if (!roomId || !username) {\r\n            toast.error('ROOM ID & username is required');\r\n            return;\r\n        }\r\n\r\n        // Redirect\r\n        navigate(`/editor/${roomId}`, {\r\n            state: {\r\n                username,\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleInputEnter = (e) => {\r\n        if (e.code === 'Enter') {\r\n            joinRoom();\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"homePageWrapper\">\r\n            <div className=\"formWrapper\">\r\n                <div style={{display:'flex' ,justifyContent:'center'}}>\r\n                <img\r\n                    className=\"homePageLogo\"\r\n                    src=\"/img/coding.png\"\r\n                    alt=\"code-sync-logo\"\r\n                />\r\n                <span style={{margin:' 10px',fontWeight:'bold',fontSize:'18px'}}>CodeShare</span>\r\n                </div>\r\n                \r\n                 \r\n                <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\r\n                <div className=\"inputGroup\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"inputBox\"\r\n                        placeholder=\"ROOM ID\"\r\n                        onChange={(e) => setRoomId(e.target.value)}\r\n                        value={roomId}\r\n                        onKeyUp={handleInputEnter}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"inputBox\"\r\n                        placeholder=\"USERNAME\"\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        value={username}\r\n                        onKeyUp={handleInputEnter}\r\n                    />\r\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\r\n                        Join\r\n                    </button>\r\n                    <span className=\"createInfo\">\r\n                        If you don't have an invite then create &nbsp;\r\n                        <a\r\n                            onClick={createNewRoom}\r\n                            href=\"\"\r\n                            className=\"createNewBtn\"\r\n                        >\r\n                            new room\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <footer>\r\n                <h4>\r\n                    Built with ðŸ’› &nbsp; by &nbsp;\r\n                    <a href=\"/\">Rahi</a>\r\n                </h4>\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage","import React from 'react';\r\nimport Avatar from 'react-avatar';\r\n\r\nconst Client = ({ username }) => {\r\n    return (\r\n        <div className=\"client\">\r\n            <Avatar name={username} size={50} round=\"14px\" />\r\n            <span className=\"userName\">{username}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Client;","import React, { useEffect, useRef } from 'react';\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\nimport ACTIONS from '../Actions';\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n    const editorRef = useRef(null);\r\n    useEffect(() => {\r\n        async function init() {\r\n            editorRef.current = Codemirror.fromTextArea(\r\n                document.getElementById('realtimeEditor'),\r\n                {\r\n                    mode: { name: 'javascript', json: true },\r\n                    theme: 'dracula',\r\n                    autoCloseTags: true,\r\n                    autoCloseBrackets: true,\r\n                    lineNumbers: true,\r\n                }\r\n            );\r\n\r\n            editorRef.current.on('change', (instance, changes) => {\r\n                const { origin } = changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code);\r\n                if (origin !== 'setValue') {\r\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n                        roomId,\r\n                        code,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socketRef.current) {\r\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n                if (code !== null) {\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n        };\r\n    }, [socketRef.current]);\r\n\r\n    return <textarea id=\"realtimeEditor\"></textarea>;\r\n};\r\n\r\nexport default Editor;","import { io } from 'socket.io-client';\r\n\r\nexport const initSocket = async () => {\r\n    const options = {\r\n        'force new connection': true,\r\n        reconnectionAttempt: 'Infinity',\r\n        timeout: 10000,\r\n        transports: ['websocket'],\r\n    };\r\n    return io(process.env.REACT_APP_BACKEND_URL, options);\r\n};","import React, { useState, useRef, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport ACTIONS from '../Actions';\r\nimport Client from '../components/Client';\r\nimport Editor from '../components/Editor';\r\nimport { initSocket } from '../socket';\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    Navigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\n\r\nconst EditorPage = () => {\r\n    const socketRef = useRef(null);\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const { roomId } = useParams();\r\n    const reactNavigator = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            socketRef.current = await initSocket();\r\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n            function handleErrors(err) {\r\n                console.log('socket error', err);\r\n                toast.error('Socket connection failed, try again later.');\r\n                reactNavigator('/');\r\n            }\r\n\r\n            socketRef.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                username: location.state?.username,\r\n            });\r\n\r\n            // Listening for joined event\r\n            socketRef.current.on(\r\n                ACTIONS.JOINED,\r\n                ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room.`);\r\n                        console.log(`${username} joined`);\r\n                    }\r\n                    setClients(clients);\r\n                    console.log('Debug',clients);\r\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                        code: codeRef.current,\r\n                        socketId,\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Listening for disconnected\r\n            socketRef.current.on(\r\n                ACTIONS.DISCONNECTED,\r\n                ({ socketId, username }) => {\r\n                    toast.success(`${username} left the room.`);\r\n                    setClients((prev) => {\r\n                        return prev.filter(\r\n                            (client) => client.socketId !== socketId\r\n                        );\r\n                    });\r\n                }\r\n            );\r\n        };\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(ACTIONS.JOINED);\r\n            socketRef.current.off(ACTIONS.DISCONNECTED);\r\n        };\r\n    }, []);\r\n\r\n    async function copyRoomId() {\r\n        try {\r\n            await navigator.clipboard.writeText(roomId);\r\n            toast.success('Room ID has been copied to your clipboard');\r\n        } catch (err) {\r\n            toast.error('Could not copy the Room ID');\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    function leaveRoom() {\r\n        reactNavigator('/');\r\n    }\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <div className=\"aside\">\r\n                <div className=\"asideInner\">\r\n                    <div className=\"logo\">\r\n                        <img\r\n                            className=\"logoImage\"\r\n                            src=\"/img/coding.png\"\r\n                            alt=\"logo\"\r\n                        />\r\n                            <span style={{fontWeight:'bold',marginLeft:'20px',fontSize:'18px'}}>codeShare</span>\r\n                      \r\n                        \r\n                    </div>\r\n                    <h3 style={{margin:'10px 0px'}}>Connected</h3>\r\n                    <div className=\"clientsList\">\r\n                        {clients.map((client) => (\r\n                            <Client\r\n                                key={client.socketId}\r\n                                username={client.username}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\r\n                    Copy ROOM ID\r\n                </button>\r\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\r\n                    Leave\r\n                </button>\r\n            </div>\r\n            <div className=\"editorWrap\">\r\n                <Editor\r\n                    socketRef={socketRef}\r\n                    roomId={roomId}\r\n                    onCodeChange={(code) => {\r\n                        codeRef.current = code;\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;","import React from \"react\";\n\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Toaster } from 'react-hot-toast';\nimport Home from './Pages/HomePage';\nimport EditorPage from './Pages/EditorPage';\n\n\nfunction App() {\n \n  return (\n   <div>\n     <div>\n                <Toaster\n                    position=\"top-right\"\n                    toastOptions={{\n                        success: {\n                            theme: {\n                                primary: '#4aed88',\n                            },\n                        },\n                    }}\n                ></Toaster>\n            </div>\n            <BrowserRouter>\n                <Routes>\n                    <Route path=\"/\" element={<Home />}></Route>\n                    <Route\n                        path=\"/editor/:roomId\"\n                        element={<EditorPage />}\n                    ></Route>\n                </Routes>\n            </BrowserRouter>\n   </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redux\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const ACTIONS = {\r\n    JOIN: 'join',\r\n    JOINED: 'joined',\r\n    DISCONNECTED: 'disconnected',\r\n    CODE_CHANGE: 'code_change',\r\n    SYNC_CODE: 'sync_code',\r\n    LEAVE: 'leave',\r\n};\r\n\r\nmodule.exports = ACTIONS;"],"sourceRoot":""}